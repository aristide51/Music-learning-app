const { Course, User, Lesson } = require('../models');

const courseController = {
  // Cr√©er un nouveau cours
  async create(req, res) {
    try {
      console.log('üìù Cr√©ation d\'un nouveau cours...');
      const { title, description, level, price, category } = req.body;
      const instructor_id = req.user.id;

      const course = await Course.create({
        title,
        description,
        level,
        price,
        instructor_id,
        category
      });

      console.log('‚úÖ Cours cr√©√© avec succ√®s');
      res.status(201).json({
        message: 'Cours cr√©√© avec succ√®s',
        course
      });
    } catch (error) {
      console.error('‚ùå Erreur lors de la cr√©ation du cours:', error);
      res.status(500).json({ message: 'Erreur lors de la cr√©ation du cours' });
    }
  },

  // R√©cup√©rer tous les cours
  async getAll(req, res) {
    try {
      console.log('üîç R√©cup√©ration de tous les cours...');
      const courses = await Course.findAll({
        include: [
          {
            model: User,
            as: 'instructor',
            attributes: ['username', 'email']
          }
        ]
      });

      console.log(`‚úÖ ${courses.length} cours r√©cup√©r√©s`);
      res.json(courses);
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des cours:', error);
      res.status(500).json({ message: 'Erreur lors de la r√©cup√©ration des cours' });
    }
  },

  // R√©cup√©rer un cours par son ID
  async getById(req, res) {
    try {
      console.log('üîç R√©cup√©ration du cours...');
      console.log('ID du cours demand√©:', req.params.id);
      console.log('URL compl√®te:', req.originalUrl);
      console.log('M√©thode:', req.method);
      console.log('Headers:', req.headers);
      
      if (!req.params.id) {
        console.log('‚ùå ID du cours manquant');
        return res.status(400).json({
          success: false,
          message: 'ID du cours requis'
        });
      }

      // V√©rifier si l'ID est un nombre valide
      const courseId = parseInt(req.params.id);
      if (isNaN(courseId)) {
        console.log('‚ùå ID du cours invalide:', req.params.id);
        return res.status(400).json({
          success: false,
          message: 'ID du cours invalide'
        });
      }

      console.log('Recherche du cours avec ID:', courseId);
      const course = await Course.findByPk(courseId, {
        include: [
          {
            model: User,
            as: 'instructor',
            attributes: ['id', 'username', 'email']
          },
          {
            model: Lesson,
            as: 'lessons',
            attributes: ['id', 'title', 'description', 'duration', 'lessonOrder', 'videoUrl']
          }
        ]
      });

      console.log('R√©sultat de la requ√™te:', course ? 'Cours trouv√©' : 'Cours non trouv√©');

      if (!course) {
        console.log('‚ùå Cours non trouv√© avec ID:', courseId);
        return res.status(404).json({ 
          success: false,
          message: 'Cours non trouv√©',
          id: courseId
        });
      }

      console.log('‚úÖ Cours r√©cup√©r√© avec succ√®s');
      console.log('Donn√©es du cours:', JSON.stringify(course, null, 2));
      
      // Formater la r√©ponse
      const formattedCourse = {
        success: true,
        data: {
          id: course.id,
          title: course.title,
          description: course.description,
          level: course.level,
          category: course.category,
          price: course.price,
          status: course.status,
          instructor: course.instructor ? {
            id: course.instructor.id,
            username: course.instructor.username,
            email: course.instructor.email
          } : null,
          lessons: course.lessons ? course.lessons.map(lesson => ({
            id: lesson.id,
            title: lesson.title,
            description: lesson.description,
            duration: lesson.duration,
            lessonOrder: lesson.lessonOrder,
            videoUrl: lesson.videoUrl
          })) : []
        }
      };

      console.log('R√©ponse format√©e:', JSON.stringify(formattedCourse, null, 2));
      res.json(formattedCourse);
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration du cours:', error);
      console.error('Stack trace:', error.stack);
      res.status(500).json({ 
        success: false,
        message: 'Erreur lors de la r√©cup√©ration du cours',
        error: error.message
      });
    }
  },

  // Mettre √† jour un cours
  async update(req, res) {
    try {
      console.log('üìù Mise √† jour du cours...');
      const course = await Course.findByPk(req.params.id);
      if (!course) {
        console.log('‚ùå Cours non trouv√©');
        return res.status(404).json({ message: 'Cours non trouv√©' });
      }

      if (course.instructor_id !== req.user.id) {
        console.log('‚ùå Non autoris√©');
        return res.status(403).json({ message: 'Non autoris√©' });
      }

      await course.update(req.body);
      console.log('‚úÖ Cours mis √† jour avec succ√®s');
      res.json(course);
    } catch (error) {
      console.error('‚ùå Erreur lors de la mise √† jour du cours:', error);
      res.status(500).json({ message: 'Erreur lors de la mise √† jour du cours' });
    }
  },

  // Supprimer un cours
  async delete(req, res) {
    try {
      console.log('üóëÔ∏è Suppression du cours...');
      const course = await Course.findByPk(req.params.id);
      if (!course) {
        console.log('‚ùå Cours non trouv√©');
        return res.status(404).json({ message: 'Cours non trouv√©' });
      }

      if (course.instructor_id !== req.user.id) {
        console.log('‚ùå Non autoris√©');
        return res.status(403).json({ message: 'Non autoris√©' });
      }

      await course.destroy();
      console.log('‚úÖ Cours supprim√© avec succ√®s');
      res.json({ message: 'Cours supprim√© avec succ√®s' });
    } catch (error) {
      console.error('‚ùå Erreur lors de la suppression du cours:', error);
      res.status(500).json({ message: 'Erreur lors de la suppression du cours' });
    }
  },

  // Ajouter une le√ßon √† un cours
  async addLesson(req, res) {
    try {
      console.log('üìù Ajout d\'une le√ßon au cours...');
      const course = await Course.findByPk(req.params.id);
      if (!course) {
        console.log('‚ùå Cours non trouv√©');
        return res.status(404).json({ message: 'Cours non trouv√©' });
      }

      if (course.instructor_id !== req.user.id) {
        console.log('‚ùå Non autoris√©');
        return res.status(403).json({ message: 'Non autoris√©' });
      }

      const lesson = await Lesson.create({
        course_id: course.id,
        ...req.body
      });

      console.log('‚úÖ Le√ßon ajout√©e avec succ√®s');
      res.status(201).json({
        message: 'Le√ßon ajout√©e avec succ√®s',
        lesson
      });
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'ajout de la le√ßon:', error);
      res.status(500).json({ message: 'Erreur lors de l\'ajout de la le√ßon' });
    }
  },

  // R√©cup√©rer les le√ßons d'un cours
  async getLessons(req, res) {
    try {
      console.log('üîç R√©cup√©ration des le√ßons du cours...');
      const course = await Course.findByPk(req.params.id);
      if (!course) {
        console.log('‚ùå Cours non trouv√©');
        return res.status(404).json({ message: 'Cours non trouv√©' });
      }

      const lessons = await Lesson.findAll({
        where: { course_id: course.id },
        order: [['lessonOrder', 'ASC']]
      });

      console.log(`‚úÖ ${lessons.length} le√ßons r√©cup√©r√©es`);
      res.json(lessons);
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des le√ßons:', error);
      res.status(500).json({ message: 'Erreur lors de la r√©cup√©ration des le√ßons' });
    }
  }
};

module.exports = courseController; 