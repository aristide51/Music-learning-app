const Payment = require('../models/Payment');
const Course = require('../models/Course');
const User = require('../models/User');
const { v4: uuidv4 } = require('uuid');

// Cr√©er un nouveau paiement
exports.createPayment = async (req, res) => {
  try {
    const {
      courseId,
      amount,
      firstName,
      lastName,
      email,
      whatsapp
    } = req.body;

    // V√©rifier si le cours existe
    const course = await Course.findById(courseId);
    if (!course) {
      return res.status(404).json({ message: 'Cours non trouv√©' });
    }

    // V√©rifier si le montant correspond au prix du cours
    if (amount !== course.price) {
      return res.status(400).json({ message: 'Le montant ne correspond pas au prix du cours' });
    }

    // Cr√©er le paiement
    const payment = new Payment({
      userId: req.user._id,
      courseId,
      amount,
      firstName,
      lastName,
      email,
      whatsapp,
      transactionId: uuidv4(),
      status: 'pending'
    });

    await payment.save();

    // Retourner les informations n√©cessaires pour le paiement
    res.status(201).json({
      message: 'Paiement en attente de confirmation',
      paymentId: payment._id,
      transactionId: payment.transactionId,
      paymentDetails: {
        amount: amount,
        whatsapp: whatsapp,
        courseTitle: course.title
      }
    });
  } catch (error) {
    console.error('Erreur lors de la cr√©ation du paiement:', error);
    res.status(500).json({ message: 'Erreur lors de la cr√©ation du paiement' });
  }
};

// Confirmer un paiement (√† appeler manuellement apr√®s r√©ception du paiement)
exports.confirmPayment = async (req, res) => {
  try {
    const { paymentId } = req.params;

    const payment = await Payment.findById(paymentId);
    if (!payment) {
      return res.status(404).json({ message: 'Paiement non trouv√©' });
    }

    // Mettre √† jour le statut du paiement
    payment.status = 'completed';
    await payment.save();

    // D√©bloquer le cours pour l'utilisateur
    await User.findByIdAndUpdate(payment.userId, {
      $addToSet: { enrolledCourses: payment.courseId }
    });

    // Retourner les informations pour le message WhatsApp
    const course = await Course.findById(payment.courseId);
    res.json({
      message: 'Paiement confirm√© avec succ√®s',
      whatsappInfo: {
        number: payment.whatsapp,
        message: `üéµ *Confirmation de paiement - Music Learning App* üéµ\n\n` +
          `Bonjour ${payment.firstName},\n\n` +
          `Votre paiement a √©t√© confirm√© avec succ√®s !\n\n` +
          `üìù *D√©tails de la transaction :*\n` +
          `‚Ä¢ Transaction ID: ${payment.transactionId}\n` +
          `‚Ä¢ Cours: ${course.title}\n` +
          `‚Ä¢ Montant: ${payment.amount} FCFA\n\n` +
          `‚úÖ Votre cours est maintenant d√©bloqu√© !\n` +
          `Vous pouvez y acc√©der depuis votre espace personnel.\n\n` +
          `Merci de votre confiance ! üé∏`
      }
    });
  } catch (error) {
    console.error('Erreur lors de la confirmation du paiement:', error);
    res.status(500).json({ message: 'Erreur lors de la confirmation du paiement' });
  }
};

// Obtenir les d√©tails d'un paiement
exports.getPaymentDetails = async (req, res) => {
  try {
    const payment = await Payment.findById(req.params.paymentId)
      .populate('courseId', 'title')
      .populate('userId', 'firstName lastName');

    if (!payment) {
      return res.status(404).json({ message: 'Paiement non trouv√©' });
    }

    res.json(payment);
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des d√©tails du paiement:', error);
    res.status(500).json({ message: 'Erreur lors de la r√©cup√©ration des d√©tails du paiement' });
  }
}; 